Tactical data description:

- XCOM3/MAPS/

Each folder inside describes one tactical tileset (a map/ a building). Like, Slums, or UFO Type 8.

- XCOM3/MAPS/XXNNNNNN (ex: 58UFO8)

Folder name contains serial number and a title (hinting to what kind of a map it actually is, like 07CORPHQ - "Corporate Headquarters").
Following is the folder's contents:

-- BUILDING.DAT

Length: 1966
Content:

00..11 		- 12 bytes, contain x, y, z sizes of a chunk.
Editor allows this to go up to 20, however, ingame there is only space in the UI for up to 9 levels, and exit values are stored only for up to 15 levels.

12..23 		- 12 bytes, contain x, y, z sizes of a battlefield. 
This many chunks will be combined together to form a battlefield by a map generator. Current assumption is that generator takes into account min/max values defined in SDT files of SECs, and then just spawns SECs randomly to cover this amount of chunks.

24     		- 1 byte, bitwise, allow entrance from NESW
25 	   		- 1 byte, bitwise, allow exit from NESW
This means that bit 0 stands for N, bit 1 for E etc. So, value of 15 (1111) would mean "any direction" and 12 (1100) would mean "south and west". North in the game is the top-right direction, east is bottom-right etc.

26..33 		- 8 bytes, 4 bytes per value, contain min and max values for entrance levels. 
34..41  	- 8 bytes, 4 bytes per value, contain min and max values for exit levels.
These values limit at what levels you can spawn and leave - for example, you cannot spawn at level 1 in 36CHURCH (basement), even though you can exit there. 

42..1961 	- Exit locations. 15 exits per side per level, 15 max levels. 4 bytes per value, and 16 values are stored, 16th is always 0xFFFFFFFF

The game stores locations of exits here in exit serial number then level then side order. Side is stored in x then y order, so first right hand and then left hand exist. A single 4-byte value is stored which indicates the position of the exit (corresponding to the in-game coordinates on the axes). 16 values are stored in a bunch, 16th always being filled with 0xFFFFFFFF.

So first it stores right-hand exit#1 for level 1, then right-hand exit #2 for level 1, up to exit #15, then right-hand exit$1 for level 2, etc up to level 15, then left-hand exit#1 for level 1 etc. 
Or, in other words, if we describe a value as EX#01L02 where X is exit type (X for right wall, Y for left wall), #01 is serial number and L02 is level, then the game stores exits in the following order:
EX#01L01, EX#02L01,...,EX#15L01,<0xFFFFFFFF>,EX#01L02,EX#02L02,.....,EX#15L15,<0xFFFFFFF>,EY#01L01,EY#02L01,.....EY#15L15,<0xFFFFFFFF>

1962..1965 	- 4 bytes, contains index of a destroyed ground tile. I guess this is placed on level 1 if ground is destroyed, so that there's no "blanks" in the map.

-- XXSECYY.SDT, XXSECYY.SLS, XXSECYY.SMP, XXSECYY.SOB (ex: 37SEC12.SDT, 37SEC12.SLS, etc.)

Groups of four files. ".SOB" file is not always present. They represent a single block in a map. Map can then consist of some amount of those blocks. Like, Cult of Sirius temples have typical "building blocks" they're made from - twin altar room, twin lift room, chessboard room, dining room. 

--- XXSECYY.SDT

Length: 20
Content:
00..11 - 12 bytes, contain x, y, z number of chunks. 
12..15 - 4 bytes, min number of occurences
16..19 - 4 bytes, max number of occurences

Number of chunks seems to be used for the case when some blocks are bigger than others. Like, again, Cult of Sirius temples can have square rooms (like the twin elevator room) and rectangular rooms (like the chessboard room). In this case, 2 chunks are used for bigger ones.

--- XXSECYY.SLS

Length: Blocks of 136
Content: Line of Sight, waypoint, spawning and AI priority information

The map is divided into blocks. Each block is revealed when a unit enters one of it's cells (however, it seems normal LOS calculation is also present, so that you can see into other blocks without entering them, I assume seeing one of the block's cells reveals whole block too).

Additionally, three kinds of information are present.

1) Pathing (waypoint) information.
This has not yet been decoded, nor we will need to, because we will most likely have our own pathing algorithms.

2) AI priority information
This sets values 0 to 4 for "Patrol priority" and "Target priority". Not yet certain how those differ, from reading TacEdit help files, it seems that "Target" means "have units in the area" and "Patrol" means "move through the area", or, probably, "see the area"? "Target" is unused in vanilla maps (never has values over 0).

3) Spawning information
Which units can spawn in the block and how likely.

Following are the offsets. Each block has 136 bytes:

00..01	- 2 bytes, unknown, usually = 1, setting it to 0 makes TacEdit ignore the block, setting to 2 or more seems to have no effect
02..13	- 12 bytes, 2 sets of x, y, z coordinates, 2 bytes per coordinate, these are coordinates of two 3d points defining a block (a 3d box). They are inclusive

14..71  - 58 bytes, contain the majority of data, not yet decyphered. This is most likely where pathing data is located.

72..129 - Starting with 72, there's hardly any data. In 58 bytes only 2 are meaningful.

72 		- 4 bytes,  is in the range of 0..240
76..91 	- 16 bytes, always 0
92 		- 4 bytes,  is in the range of 0..9
96..129 - 34 bytes, always 0

130.135 - AI and Spawning information

130 	- 1 byte, 	AI Patrol Priority (valid values 0 to 4, in vanilla maps either 0 or 2)
131 	- 1 byte,   AI Target Priority (valid values 0 to 4, in vanilla maps always 0)

132 	- 1 byte,   Spawn Type (valid values 0 to 8, however, only 0 to 2 mean something, 0 = X-Com, 1 = Rival Organisations, 2 = Civilians)
133 	- 1 byte,   Spawn Priority (valid values 0 to 4, 0 means do not spawn at all)
134 	- 1 byte,   Can Deploy Large Units (valid values 0 = no, 1 = yes)
135 	- 1 byte,   Can Deploy Non-Flying Units (valid values 0 = no, 1 = yes)

Also, jedpossum from forums says:
"As for the SLS it seems to be fog of war maybe some other data as well. Seems to have a pattern of 272 bytes(0x110 in hex) for each part.
Edit
The fog is stored as just plain binary 0 not shown 1 a tile being shown in the memory. Of course, it follows the same way as the tile map start top going down right."

I do not understand what to make of this, however.

--- XXSECYY.SMP

Length: sizeX * sizeY * sizeZ * chunksX * chunksY * chunksZ * 4
Content: Stores tiles of the map block. 
Each value contains four bytes: GD LW RW SC - Ground, Left Wall, Right Wall, Scenery.
Stored in X then Y then Z order, as a whole (if there's more than one chunk, they are still stored in X then Y then Z order regardless).

--- XXSECYY.SOB

Length: 20 blocks of 8 (if present)
Content: Loot information, what items to spawn where.

There are 20 entries of 8 bytes each. Each entry contains 4 values, 2 bytes each - x, y, z coordinates of an object, and a "priority" level, which goes from 1 to 3. 0 means there is no object, and marks unused entries.

The game has a list of loot for every organisation. The list contains 3 entries of 5 items - that is, 5 items for each priority level - 1, 2 and 3. The game then spawns 1 item on every spawn point, randomly chosen from one of the five items of an appropriate priority level. Have not checked if there's some probability to spawn anything at all, it appears as if it spawns every time.

-- MAPUNITS

Folder that contains all the information about map contents
Following are the file formats contained in the folder, followed by file names.

--- .PCK and .TAB

File types .PCK and .TAB are typical picture containers.

--- .DAT (four files for ground, scenery, left and right walls)

Length: Blocks of 86
Content: Contains information about map objects: walls, floor tiles etc. Each block contains 86 bytes. 

Values below will be indexed in the following format: "HH/DD[L]:" where HH is hex notation, DD is decimal notation of the offset, and L is length (how many bytes are used). In case there's a group of values performing a similar function, (HH-HH/DD-DD): notation will be used.

Now, a list of offsets and what they contain:

00/00[2]: 
--------
Strength. Damage requied to destroy the object. FF means indestructible (like exit arrows or asphalt on 58UFO8)

(02-07/02-07)[6]:
----------------
Explosion data

02/02[2]: 
--------
Explosion Power at GZ

04/04[2]:
------ 
Explosion depletion rate. This is subtracted every time explosion spreads to adjacent tile.

06/06[2]: 
--------
Explosion Type. Index into Damage Type table. Typically usable values:
 00 = Smoke
 01 = Alien Gas
 02 = Fire 
 03 = Stun Gas
 04 = High Explosive
 05 = Stun
 06 = Psionic Blast
 
(08-0A/08-10)[3]:
-------------------
Related to objects catching fire and burning. 

08/08[1]:
---------
Fire Resistance. 

Notes: 

Unknown how does it work. Obviously a signed value, meaning values over 128 are negatives (from -127 to -1). Obviously -1 (255) is immune, but it is observed, for example, that ceramic floors always have a value of -76, and machinery has -96. and kitchen fridges and alien city's columns have a value of -126?
Maybe it's not signed, but 255 is hardcoded immune? Seeing as values higher than 128 are multiples of 10 usually (130,140,180) it makes sense.

09/09[1]:
---------
Burn Time. Unknown what units is this in.

0A/10[1]:
---------
Intensity/Time Table. Most likely unused.

Notes:

This can be 1 or 0. Value 0 is encountered very rarely, only 2% of all objects have it, and only 0.5% of all objects have both it and a value other than 255 in 08 (fire-resistance). I assume this is unused.

(0B-0E/11-14)[4]:
----------------
Related to the tile blocking other effects. Mechanics are not yet clear.

0B/11[1]: 
--------
Physical blocking.

0C/12[1]: 
--------
Gas blocking.

0D/13[1]: 
--------
Fire blocking.

0E/14[1]: 
--------
Psionic blocking.

(0F-36/15-54)[40]: 
-----------------
40 bytes, voxel map (references to TACDATA\LOFTEMPS)

0F/15[20]:
---------
Line-of-fire voxelmap offsets.

23/35[20]:
---------
Line-of-sight voxelmap offsets.

(37-3C/55-61)[7]:
----------------
Several misc. values.

37/55[1]:
--------
Unused in TacEdit, probably unused in the game as well.

38/56[1]:
--------
Unused in TacEdit, probably unused in the game as well.

39/57[1]:
--------
Unused in TacEdit, probably unused in the game as well.

3A/58[1]:
--------
"Size", as defined in TacEdit. Allowed values are up to 10. Uncertain how it is used. Maybe when dealing damage to a unit?

3B/59[1]:
--------
Unused in TacEdit, probably unused in the game as well.

Notes:
Most common value (3/4) is 0. Otherwise, almost every value is present. Seemst to be present much more frequently on the walls and scenery, a more rare on the ground.

3C/60[2]:
-------- 
Index of the damaged object. If this is 00, when damaged the object will just disappear

(3E-43/62-67)[6]: 
----------------
Define animation

3E/62[2]: 
--------
Index of the first animated frame in the ANIMATE.PCK file

40/64[1]: 
--------
Number of animated frames. If this is 00, there is no animation.

41/65[1]: 
--------
Auto-loop. This is never used on any proper object (excl. ones denoted at the beginning)

42/66[1]: 
--------
"Transparent", as it's marked in TileEdit. However, it is always 0. I assume it's unused.

43/67[1]:
--------
Sound effect. Possible values 0-8.

0 - ??
1 - RAWSOUND\EXTRA\METAL
2 - RAWSOUND\EXTRA\FTSOFT
3 - RAWSOUND\EXTRA\FTMUD
4 - RAWSOUND\EXTRA\FTSLUDG
5 - RAWSOUND\EXTRA\FTWOOD
6 - RAWSOUND\EXTRA\FTMARB
7 - RAWSOUND\EXTRA\FTCONC
8 - RAWSOUND\EXTRA\FTTUBE

(44-45/68-69)[2]: 
----------------
Door parameters.

44/68[1]:
--------
"Door". Wether or not this tile is a door.

45/69[1]:
--------
"Closed door". Wether or not this tile is a closed door. 

Notes: 

Only tile with both values set to 1 will act as a door. 

There are "open door" tiles with 68=1 and 69=0. However, just about any tile can be an "open door" tile and as it does not require 68=1 to function properly, it seems.

(46-49/70-73)[4]: 
----------------
Several miscellaneous parameters

46/70[1]:
--------
"LOS Through Terrain?", as it's marked in TileEdit. However, it is always 0, except for 02POLICE scenery #92-93,106-109,212-217. Maybe it works? Maybe unused.

47/71[1]:
--------
"Floor" marker. Does indeed mark hollow grounds with 0 and solids with 1. Exact way this is used is not yet known.

48/72[1]:
--------
"Gravlift". 0 = no lift, 1 = is a lift. 

Notes:

Right walls, left walls, grounds and sceneries are all marked with this, but only scenery is required to actually lift. If there's no scenery marked with 1, a wall won't help. If there's a scenery, wall is not required. However, I was not able to confirm it with ground (wether ground is enough to be a lift or wether a scenery is required on top of it).

Is not tied to animation. Game seems to animate pulsating green light on anything that is of a color pink (255,255,0), or there is some other value responsible for animation.

49/73[1]:
--------
Unused in TacEdit. Uncertain as to what it means.

Notes:
Most common is 0, but almost all other values are present

(4A-4E/74-78)[5]: 
----------------
Alternative object parameters. Only use for these is to identify an "open door" object.

4A/74[2]:
--------
"Object required for alternative", as it's marked in TileEdit. However, it is always 0 and thus I consider it unused.

4C/76[2]: 
--------
"Alternative object". Index of an open door object.

Notes:

This object is spawned at the moment the door starts animating to "open" and is despawned at the moment the doors finished animating to "closed". If it is impassable (never happens in vanilla), then unit will still pass through it right after animation is over (as I think the check to pass was already made when door was opening, as the door is considered passable) but after that it won't be able to get through until door closes fully.
For alien ship doors, this links to 00, even though there exists an object next to the doors that seems to be an open door object - maybe since it's blank they didn't use it.

In TacEdit, described as "Alternative object" but does not seem to be used for anything other than doors.

4E/78[1]: 
--------
"Alternative Object Type", as it's marked in TileEdit. However, it is unused.

Notes:

00=GD, 01=LW, 02=RW, 03=SC. 

However, does not seem to be used. Only several objects have this set, namely:
- some of the error tiles listed above
- 03HOSPIT scenery #131,132
- 07CORPHQ scenery #5
- 27CONSTR scenery #150,151
- 32POWER scenery #171
- 35TUBES right wall #43,45,46
- 46CONTRL ground #137

In non-error tiles, it is set always to the same type (03 for scenery, 02 for right walls), except the ground in 46CONTRL, which has it set to 03, however, it also has FF in "alternative object" which does not exist for 46CONTRL, as it only has 208 sceneries defined. Therefore, I conclude it is not used.
 
(4F-51/79-81)[3]: 
----------------
Movement-related parameters.
 
4F/79[1]: 
--------
Movement cost through the tile. 

Notes:
Also seems to control passability.
 00 = only present on lift walls
 04 = passable
 06 = noticed on 36CHURCH, XXUFOY lift walls
 255 = not passable
 
If set 255 for door, it will open, and let people through (unless 76 links to an unpassable object), but pathfinding won't plot through it (as it considers it to be unpassable).

50/80[1]:
--------
"Climbable". Appears to be unused.

Notes:

Most likely an unimplemented ability to jump/climb. Almost always 0. Only set to 1 for 30 objects in the game (0.1% of them):
-02POLICE scenery #68-69
-03HOSPIT scenery #1-2,184-185
-04SCHOOL scenery #40-41
-05RESCUE scenery #93-94
-08PORT scenery #202-205
-10ASTRO scenery #161-162
-15ACPOSH scenery #84-85
-18HYDRO scenery #24-27
-25FLYER scenery #193,196-197
-30WARE scenery #208-209
-32POWER scenery #171
-46CONTRL ground #135,137

Those are all things like sports ladders, pommel horses, and other objects that would seem to be either enabled to jump over, or climb. However, it doesn't seem to be doing anything ingame. 

Almost. 

I couldn't get an agent to climb a ladder, but after I destroyed a piece of scenery near the pommel horse, making a "step" of sorts, the agent agreed to get on the pommel horse, and did it VEEEEERY SLOOOOOWLY. I assume part of the old code?

51/81[1]:
--------
Object's height.

Notes:

3 is a common height for ground. 39 is the max value. 27CONSTR scenery #156-157 mistakenly has 255 in this field. 

If object is marked as passable, unit will stand this high on it (and items will lay this high on it too). 

Rules of ascension (short):

- If nearby tile is passable and on the same layer, we can always go there. Current and target tile height is irrelevant.
- If nearby tile is passable and 1 layer above, if we stand on a height of at least 26, we can go there. Target tile height is irrelevant.

Elaboration:

It seems there is no limit as to how high a unit can ascend within the same layer. If we stand next to something which has value 4 at 78 (passable), we can go there, even if we stand at 3 and try to go into 39. 

However, to ascend a layer, it seems there must be no more than 16 a difference. If we stand next to a passable object 1 layer above us, we must stand on at least 26 to go there (26+16=39+3). If we stand on 25 or lower we cannot go there. This does not account for the height of the object on the layer above, however! All that matters is that we stand on an object at least 26 high, and the above layer's object is passable. If we stand on at least 26, we can ascend up to the next layer, whatever the height is there, even if it's 39. So we can ascend 52 at once (a whole layer and a third) in one step! Provided, of course, that we start from sufficiently elevated position. Looks very funny ingame (agent slows down a lot when doing it).

Usually ingame this difference is 14, because stairs ingame have 2 sceneries, "low" and "high", first has a value of 14, second a value of 28, and then you go next level to a ground with a value of 3, meaning you ascend from 28 to 42, another 14. And usually the game doesn't have more than 2 flight of stairs in a row, it goes flat-raise-raise-flat. However, when there are longer stairs (for example, hills in battleshipmap) where it goes flat-raise-raise-raise-raise-flat, then when you go from "high" to a "low" stair scenery (from 28 to 14 on another layer) you can see how unevenly the agent ascends. Visually, the path is a linear ascension, but agent first goes up a litte bit (0 to 14), then again a little (14 to 28), and then a lot (28 to 53).

(52-55/82-85)[4]: 
----------------
Gravity and structure parameters.

52/82[1]:
--------
Floating object. Wether can hover when unsupported. 1 = can hover, 0 = normal object.

Notes: 

Only used for teleporters (ground/walls/scenery) and UFO (ground). This is what prevents UFO's higher layers from collapsing as they are not supported like normal buildings. Setting 0 for ufo ground tiles and destroying at least one object of ufo hull will cause hilarious chain reactions )))

53/83[1]:
--------
Provides support. Wether or not other objects can rely on this to stay in place and not fall. 1 = provides support, 0 = does not.

54/84[1]:
--------
Gets support from. Handles how objects stay in place or fall, as well as objects "latching" to neighbours.

Values encountered:
 0  = Down (object is supported by an object below)
 5  = Up (object can be supported by an object above it)
 
 Standart: (can get support from same type at this direction)
		   (feature can also cling to a wall in this direction)
 1  = North
 2  = East
 3  = South
 4  = West
 
 Ground: (Standart + can get support from ground at this direction)
 11 = North
 12 = East
 13 = South
 14 = West
 
 Feature: (Standart + can get support from feature at this direction at z-1)
 21 = North
 22 = East
 23 = South
 24 = West
 
 Ground + Wall: (Standart + Ground + can get support from wall at this direction)
 41 = North
 42 = East
 43 = South
 44 = West
 
 Ground + Feature: Standart + Ground + Feature properties all in one
 51 = 1 + 11 + 21
 52 = 2 + 12 + 22
 53 = 3 + 13 + 23
 54 = 4 + 14 + 24
 
 36 = North or West Walls (North's Right and West's Left)
 
 7  = unknown (only present on brick walls of 52UFO02)
 20 = unknown (abundant on blocky scenery)
 30 = TYPO? Seems like it should read "1"
 32 = TYPO? Seems like it should read "0"
  
55/85[1]: 
--------
"Independent structure". Uncertain what this means.

Overall Notes:

What we are still missing?
- "Goal" flag (which scenery needs to be destroyed for alien buildings)?
- "Value", how much the faction values the object, how much relations are damaged when you destroy it
- Latching values 7, 20, >=30?
- How does the game know it has to spawn fire/smoke at specific sceneries?

Other tile information I discovered:
- It seems that values of the fire (SC_25 for UFOs) has no effect. Replaced them with a generic ufo tile's values and nothing happened. It's still a fire, it burns, you can pass through it. It seems the game just manually replaces all these at start with fires. Fire is always 25 and smoke is 26 to 42. I guess it's just replaced at map start in the UFO map type code?

--- .USE

Length: 256
Content: Wether or not a particular object is used in the map. 01 = NOT used, 00 = used. 

--- ANIMATE.PCK, ANIMATE.TAB, ANIMATE.USE

Contain animated frames for objects on the map that are animated. 

--- FEATURE.PCK, FEATURE.TAB, FEATURE.USE, FEATMAP.DAT
--- GROUND.PCK, GROUND.TAB, GROUND.USE, GROUNMAP.DAT
--- LEFT.PCK, LEFT.TAB, LEFT.USE, LEFTMAP.DAT
--- RIGHT.PCK, RIGHT.TAB, RIGHT.USE, RIGHTMAP.DAT

Contains sprites and object definition for the scenery, ground, left and right walls.

--- FLOOR.PCK, FLOOR.TAB, FLOOT.USE, FLOORMAP.DAT

Unused, supposedly it's been used for ground in the past but have been replaced and was not deleted

--- RUBBLE.DAT

Length: 15 bytes
Content: Indexes of "rubble" objects. 

It has 3 blocks of 5 values, first block is for left wall, second for right wall, third for scenery. Values are indexes into corresponding object lists. They link to 5 "stages" of rubble, from smallest to biggest size. So, if one right wall falls down, an right wall object with index 1 (6th values in the file) is spawned. If a second one falls down there, this object changes to the object with index 2 (7th value in the file) etc up to 5th index.

--- SFEATURE.PCK, SFEATURE.TAB
--- SGROUND.PCK, SGROUND.TAB
--- SLEFT.PCK, SLEFT.TAB
--- SRIGHT.PCK, SRIGHT.TAB

Contains strategy map images for the scenery, ground, left and right walls. Sometimes there's less entries here than there are actual objects, presumably that means objects at the end do not have a strategy map image.

--- STRATMAP.PCK, STRATMAP.TAB

Unknown. XED won't open it. Only present in several maps. Maybe unused, but forgot to delete.

- XCOM3/SCENARIO

Supposedly here the contents of the currently played tactical map are copied.


- XCOM/TACDATA/UNIT, XCOM/TACDATA/ALIEN, XCOM/TACDATA/CIV

Animation data and frames, UNIT for humanoid combat units (X-COM, Anthropod, Skeletoid, Gangs, Cultists...), CIV for civilians, ALIEN for aliens tha are not humanoid (Spitter, Popper, Worms etc.)

-- .AD, .UA, .UF

Animation data files. Called ANIM when applied to multiple units

--- ANIM.AD

Length: 1600 (2x800)
Content: 2 bytes per entry, index(*4) into ANIM.UA file. Each index is for one specific state (unit with bare hands running nw, unit with 2-h weapon kneeling sw, unit with 1-h weapon shooting n etc.). They go in order - first 8 are standing with no weapon, then standing with 1-h weapon, then with 2-h, then kneeling bare handed etc.

--- ANIM.UA

Length: 2784 (4x696)
Content: 4 bytes per entry, contains 2-byte index(*36) into ANIM.UF file, 1 byte animation frame count and 1 unknown value.

--- ANIM.UF

Length: 74880 (36x2080)
Content: 36 bytes per entry, each entry defines one animation frame, frames are read sequentially for the amount specified in .UA file.

00-27: 	28 bytes, 7 blocks of 4 bytes, containing image indexes and offsets

Each block has 2 bytes image index, 1 byte signed x offset, 1 byte signed y offset.
Units have up to 5 image files, marked with letters (i.e. x-com3a to x-com3e).
Additionally, there is an image file for shadows and for items held in hands.

Blocks go in the following order:

00:		Shadow
04:		File A (Body)
08:		File B (Legs)
12:		File C (Head)
16:		File D (Left Arm)
20:		File E (Right Arm)
24:		Item

File B is a second entry, sometimes not present (0xffff). Usually this is unit's legs. It is not present for shooting animations - in this case, you use legs from normal animation and everything else from shooting animation. 

Item entry gives index of item image to be used. 0xffff if item should not be displayed. Does not always correspond to the direction unit is facing in - since 2 handed weapons are carried facing sideways.

For humanoid units, A is body, B is legs, C is head, D is left hand, E is right hand. Some other units have only one file, like Spitters, or just several, like Megaspawns.

28-35: 	Image to be drawn

Seven bytes designating the draw order. Each index refers to a block from before ( 0 = shadow, 2 = Legs etc.). Going from the first value (at 28) to the last one (at 35), corresponding images are drawn one after another.

35: 1 byte, Unknown, 0-255

